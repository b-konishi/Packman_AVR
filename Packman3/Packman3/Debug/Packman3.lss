
Packman3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009de  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e5  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f82  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00020fe1  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  0002306d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000230d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00007245  00000000  00000000  0002310b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b5 c0       	rjmp	.+362    	; 0x16c <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
  2e:	00 00       	nop
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop
  74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
  76:	00 00       	nop
  78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
  7e:	00 00       	nop
  80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
  82:	00 00       	nop
  84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
  86:	00 00       	nop
  88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
  8e:	00 00       	nop
  90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
  92:	00 00       	nop
  94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
  96:	00 00       	nop
  98:	71 c0       	rjmp	.+226    	; 0x17c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6f c0       	rjmp	.+222    	; 0x17c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	6d c0       	rjmp	.+218    	; 0x17c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	6b c0       	rjmp	.+214    	; 0x17c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	69 c0       	rjmp	.+210    	; 0x17c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	67 c0       	rjmp	.+206    	; 0x17c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	65 c0       	rjmp	.+202    	; 0x17c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	63 c0       	rjmp	.+198    	; 0x17c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	61 c0       	rjmp	.+194    	; 0x17c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5f c0       	rjmp	.+190    	; 0x17c <__bad_interrupt>
  be:	00 00       	nop
  c0:	5d c0       	rjmp	.+186    	; 0x17c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	5b c0       	rjmp	.+182    	; 0x17c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	59 c0       	rjmp	.+178    	; 0x17c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	57 c0       	rjmp	.+174    	; 0x17c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	55 c0       	rjmp	.+170    	; 0x17c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	53 c0       	rjmp	.+166    	; 0x17c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	51 c0       	rjmp	.+162    	; 0x17c <__bad_interrupt>
  da:	00 00       	nop
  dc:	4f c0       	rjmp	.+158    	; 0x17c <__bad_interrupt>
  de:	00 00       	nop
  e0:	4d c0       	rjmp	.+154    	; 0x17c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	4b c0       	rjmp	.+150    	; 0x17c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	49 c0       	rjmp	.+146    	; 0x17c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	47 c0       	rjmp	.+142    	; 0x17c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	45 c0       	rjmp	.+138    	; 0x17c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	43 c0       	rjmp	.+134    	; 0x17c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	41 c0       	rjmp	.+130    	; 0x17c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3f c0       	rjmp	.+126    	; 0x17c <__bad_interrupt>
  fe:	00 00       	nop
 100:	3d c0       	rjmp	.+122    	; 0x17c <__bad_interrupt>
 102:	00 00       	nop
 104:	3b c0       	rjmp	.+118    	; 0x17c <__bad_interrupt>
 106:	00 00       	nop
 108:	39 c0       	rjmp	.+114    	; 0x17c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	37 c0       	rjmp	.+110    	; 0x17c <__bad_interrupt>
 10e:	00 00       	nop
 110:	35 c0       	rjmp	.+106    	; 0x17c <__bad_interrupt>
 112:	00 00       	nop
 114:	33 c0       	rjmp	.+102    	; 0x17c <__bad_interrupt>
 116:	00 00       	nop
 118:	31 c0       	rjmp	.+98     	; 0x17c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2f c0       	rjmp	.+94     	; 0x17c <__bad_interrupt>
 11e:	00 00       	nop
 120:	2d c0       	rjmp	.+90     	; 0x17c <__bad_interrupt>
 122:	00 00       	nop
 124:	2b c0       	rjmp	.+86     	; 0x17c <__bad_interrupt>
 126:	00 00       	nop
 128:	29 c0       	rjmp	.+82     	; 0x17c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	27 c0       	rjmp	.+78     	; 0x17c <__bad_interrupt>
 12e:	00 00       	nop
 130:	25 c0       	rjmp	.+74     	; 0x17c <__bad_interrupt>
 132:	00 00       	nop
 134:	23 c0       	rjmp	.+70     	; 0x17c <__bad_interrupt>
 136:	00 00       	nop
 138:	21 c0       	rjmp	.+66     	; 0x17c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	1f c0       	rjmp	.+62     	; 0x17c <__bad_interrupt>
 13e:	00 00       	nop
 140:	1d c0       	rjmp	.+58     	; 0x17c <__bad_interrupt>
 142:	00 00       	nop
 144:	1b c0       	rjmp	.+54     	; 0x17c <__bad_interrupt>
 146:	00 00       	nop
 148:	19 c0       	rjmp	.+50     	; 0x17c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	17 c0       	rjmp	.+46     	; 0x17c <__bad_interrupt>
 14e:	00 00       	nop
 150:	15 c0       	rjmp	.+42     	; 0x17c <__bad_interrupt>
 152:	00 00       	nop
 154:	13 c0       	rjmp	.+38     	; 0x17c <__bad_interrupt>
 156:	00 00       	nop
 158:	11 c0       	rjmp	.+34     	; 0x17c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	0f c0       	rjmp	.+30     	; 0x17c <__bad_interrupt>
 15e:	00 00       	nop
 160:	0d c0       	rjmp	.+26     	; 0x17c <__bad_interrupt>
 162:	00 00       	nop
 164:	0b c0       	rjmp	.+22     	; 0x17c <__bad_interrupt>
 166:	00 00       	nop
 168:	09 c0       	rjmp	.+18     	; 0x17c <__bad_interrupt>
	...

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62
 178:	83 d0       	rcall	.+262    	; 0x280 <main>
 17a:	87 c0       	rjmp	.+270    	; 0x28a <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	fc 01       	movw	r30, r24
 184:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
 18a:	c6 2f       	mov	r28, r22
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	de 01       	movw	r26, r28
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <ioport_configure_port_pin+0x1a>
 194:	b5 95       	asr	r27
 196:	a7 95       	ror	r26
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <ioport_configure_port_pin+0x16>
 19c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
 19e:	50 83       	st	Z, r21
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
 1a6:	28 30       	cpi	r18, 0x08	; 8
 1a8:	31 05       	cpc	r19, r1
 1aa:	89 f7       	brne	.-30     	; 0x18e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 1ac:	40 ff       	sbrs	r20, 0
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
 1b0:	41 ff       	sbrs	r20, 1
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
 1b4:	fc 01       	movw	r30, r24
 1b6:	65 83       	std	Z+5, r22	; 0x05
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
 1ba:	fc 01       	movw	r30, r24
 1bc:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
 1be:	fc 01       	movw	r30, r24
 1c0:	61 83       	std	Z+1, r22	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
 1c4:	fc 01       	movw	r30, r24
 1c6:	62 83       	std	Z+2, r22	; 0x02
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 1ce:	43 e0       	ldi	r20, 0x03	; 3
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	96 e0       	ldi	r25, 0x06	; 6
 1d8:	d2 df       	rcall	.-92     	; 0x17e <ioport_configure_port_pin>
 1da:	43 e0       	ldi	r20, 0x03	; 3
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	96 e0       	ldi	r25, 0x06	; 6
 1e4:	cc df       	rcall	.-104    	; 0x17e <ioport_configure_port_pin>
 1e6:	43 e0       	ldi	r20, 0x03	; 3
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	64 e0       	ldi	r22, 0x04	; 4
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	96 e0       	ldi	r25, 0x06	; 6
 1f0:	c6 df       	rcall	.-116    	; 0x17e <ioport_configure_port_pin>
 1f2:	43 e0       	ldi	r20, 0x03	; 3
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	68 e0       	ldi	r22, 0x08	; 8
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	96 e0       	ldi	r25, 0x06	; 6
 1fc:	c0 df       	rcall	.-128    	; 0x17e <ioport_configure_port_pin>
 1fe:	43 e0       	ldi	r20, 0x03	; 3
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e1       	ldi	r22, 0x10	; 16
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	96 e0       	ldi	r25, 0x06	; 6
 208:	ba df       	rcall	.-140    	; 0x17e <ioport_configure_port_pin>
 20a:	43 e0       	ldi	r20, 0x03	; 3
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	60 e2       	ldi	r22, 0x20	; 32
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	96 e0       	ldi	r25, 0x06	; 6
 214:	b4 df       	rcall	.-152    	; 0x17e <ioport_configure_port_pin>
 216:	43 e0       	ldi	r20, 0x03	; 3
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	60 e4       	ldi	r22, 0x40	; 64
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	96 e0       	ldi	r25, 0x06	; 6
 220:	ae df       	rcall	.-164    	; 0x17e <ioport_configure_port_pin>
 222:	43 e0       	ldi	r20, 0x03	; 3
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	60 e8       	ldi	r22, 0x80	; 128
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	96 e0       	ldi	r25, 0x06	; 6
 22c:	a8 df       	rcall	.-176    	; 0x17e <ioport_configure_port_pin>
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	58 e1       	ldi	r21, 0x18	; 24
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	96 e0       	ldi	r25, 0x06	; 6
 238:	a2 df       	rcall	.-188    	; 0x17e <ioport_configure_port_pin>
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	58 e1       	ldi	r21, 0x18	; 24
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	96 e0       	ldi	r25, 0x06	; 6
 244:	9c df       	rcall	.-200    	; 0x17e <ioport_configure_port_pin>
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	58 e1       	ldi	r21, 0x18	; 24
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	96 e0       	ldi	r25, 0x06	; 6
 250:	96 df       	rcall	.-212    	; 0x17e <ioport_configure_port_pin>
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	58 e1       	ldi	r21, 0x18	; 24
 256:	68 e0       	ldi	r22, 0x08	; 8
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	90 cf       	rjmp	.-224    	; 0x17e <ioport_configure_port_pin>
 25e:	08 95       	ret

00000260 <clock_internal_init>:
#include <asf.h>
#include <avr/io.h>
#include <util/delay.h>

void clock_internal_init() {
	OSC.CTRL |= OSC_RC32MEN_bm;
 260:	e0 e5       	ldi	r30, 0x50	; 80
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	82 60       	ori	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	loop_until_bit_is_set(OSC.STATUS, OSC_RC32MRDY_bp);
 26a:	e1 e5       	ldi	r30, 0x51	; 81
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	81 ff       	sbrs	r24, 1
 272:	fd cf       	rjmp	.-6      	; 0x26e <clock_internal_init+0xe>
	CPU_CCP = CCP_IOREG_gc;
 274:	88 ed       	ldi	r24, 0xD8	; 216
 276:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 40 00 	sts	0x0040, r24
 27e:	08 95       	ret

00000280 <main>:
}

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	clock_internal_init();
 280:	ef df       	rcall	.-34     	; 0x260 <clock_internal_init>

	board_init();
 282:	a5 df       	rcall	.-182    	; 0x1ce <board_init>

	/* Insert application code here, after the board has been initialized. */
}
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
