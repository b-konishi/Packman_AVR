
PackmanFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000566  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cf  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ae  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ad  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  58:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  5c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  68:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  6c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  70:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  74:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  7c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  80:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  84:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  88:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  8c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  90:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  94:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  98:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  9c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  ac:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  bc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  cc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  dc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  ec:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  fc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 100:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 104:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 108:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 10c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 110:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 114:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 118:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 11c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 120:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 124:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 128:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 12c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 130:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 134:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 138:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 13c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 140:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 144:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 148:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 14c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 150:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 154:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 158:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 15c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 160:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 164:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 168:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62
 178:	0e 94 df 01 	call	0x3be	; 0x3be <main>
 17c:	0c 94 b1 02 	jmp	0x562	; 0x562 <_exit>

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000184 <clock_internal_init>:

#include <avr/io.h>
#include <util/delay.h>

void clock_internal_init() {
	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
 184:	88 ed       	ldi	r24, 0xD8	; 216
 186:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
 18e:	e0 e5       	ldi	r30, 0x50	; 80
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	81 81       	ldd	r24, Z+1	; 0x01
 194:	81 ff       	sbrs	r24, 1
 196:	fd cf       	rjmp	.-6      	; 0x192 <clock_internal_init+0xe>
	CCP = CCP_IOREG_gc;              // disable register security for clock update
 198:	88 ed       	ldi	r24, 0xD8	; 216
 19a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 40 00 	sts	0x0040, r24
 1a2:	08 95       	ret

000001a4 <wait>:
}

void wait(unsigned int time){
	if (time) {
 1a4:	89 2b       	or	r24, r25
 1a6:	09 f4       	brne	.+2      	; 0x1aa <wait+0x6>
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <wait+0x4c>
	...
		__asm__ __volatile__("\n"
 1ee:	08 95       	ret
			"nop\n\t"
			"nop\n\t"
			"nop\n\t"
		);
	} else if (!time) {
		__asm__ __volatile__("\n"
 1f0:	00 00       	nop
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <HLGenerator>:
		);
	}
	return;
}

void HLGenerator(unsigned int port, unsigned char *data) {
 1f6:	af 92       	push	r10
 1f8:	bf 92       	push	r11
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ff 92       	push	r15
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	f8 2e       	mov	r15, r24
 20a:	6b 01       	movw	r12, r22
	unsigned int i;
	for (i = 0; i < 3; i++) {
 20c:	a1 2c       	mov	r10, r1
 20e:	b1 2c       	mov	r11, r1
		// 1
		PORTA.OUT = port;
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d6 e0       	ldi	r29, 0x06	; 6
 214:	fc 82       	std	Y+4, r15	; 0x04
 216:	86 01       	movw	r16, r12
		wait(data[i]);
 218:	f6 01       	movw	r30, r12
 21a:	80 81       	ld	r24, Z
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 222:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	f6 01       	movw	r30, r12
 22a:	20 81       	ld	r18, Z
 22c:	22 23       	and	r18, r18
 22e:	11 f0       	breq	.+4      	; 0x234 <HLGenerator+0x3e>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 2
		PORTA.OUT = port;
 238:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 23a:	f8 01       	movw	r30, r16
 23c:	80 81       	ld	r24, Z
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 244:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	f8 01       	movw	r30, r16
 24c:	20 81       	ld	r18, Z
 24e:	22 23       	and	r18, r18
 250:	11 f0       	breq	.+4      	; 0x256 <HLGenerator+0x60>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 3
		PORTA.OUT = port;
 25a:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 25c:	f8 01       	movw	r30, r16
 25e:	80 81       	ld	r24, Z
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 266:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	f8 01       	movw	r30, r16
 26e:	20 81       	ld	r18, Z
 270:	22 23       	and	r18, r18
 272:	11 f0       	breq	.+4      	; 0x278 <HLGenerator+0x82>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 4
		PORTA.OUT = port;
 27c:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 27e:	f8 01       	movw	r30, r16
 280:	80 81       	ld	r24, Z
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 288:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	f8 01       	movw	r30, r16
 290:	20 81       	ld	r18, Z
 292:	22 23       	and	r18, r18
 294:	11 f0       	breq	.+4      	; 0x29a <HLGenerator+0xa4>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 5
		PORTA.OUT = port;
 29e:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 2a0:	f8 01       	movw	r30, r16
 2a2:	80 81       	ld	r24, Z
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2aa:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	f8 01       	movw	r30, r16
 2b2:	20 81       	ld	r18, Z
 2b4:	22 23       	and	r18, r18
 2b6:	11 f0       	breq	.+4      	; 0x2bc <HLGenerator+0xc6>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 6
		PORTA.OUT = port;
 2c0:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 2c2:	f8 01       	movw	r30, r16
 2c4:	80 81       	ld	r24, Z
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2cc:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	f8 01       	movw	r30, r16
 2d4:	20 81       	ld	r18, Z
 2d6:	22 23       	and	r18, r18
 2d8:	11 f0       	breq	.+4      	; 0x2de <HLGenerator+0xe8>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 7
		PORTA.OUT = port;
 2e2:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 81       	ld	r24, Z
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2ee:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	f8 01       	movw	r30, r16
 2f6:	20 81       	ld	r18, Z
 2f8:	22 23       	and	r18, r18
 2fa:	11 f0       	breq	.+4      	; 0x300 <HLGenerator+0x10a>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 8
		PORTA.OUT = port;
 304:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 306:	f8 01       	movw	r30, r16
 308:	80 81       	ld	r24, Z
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 310:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	f8 01       	movw	r30, r16
 318:	20 81       	ld	r18, Z
 31a:	22 23       	and	r18, r18
 31c:	11 f0       	breq	.+4      	; 0x322 <HLGenerator+0x12c>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
	return;
}

void HLGenerator(unsigned int port, unsigned char *data) {
	unsigned int i;
	for (i = 0; i < 3; i++) {
 326:	ff ef       	ldi	r31, 0xFF	; 255
 328:	af 1a       	sub	r10, r31
 32a:	bf 0a       	sbc	r11, r31
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	c8 1a       	sub	r12, r24
 330:	d8 0a       	sbc	r13, r24
 332:	e3 e0       	ldi	r30, 0x03	; 3
 334:	ae 16       	cp	r10, r30
 336:	b1 04       	cpc	r11, r1
 338:	09 f0       	breq	.+2      	; 0x33c <HLGenerator+0x146>
 33a:	6c cf       	rjmp	.-296    	; 0x214 <HLGenerator+0x1e>
		PORTA.OUT = port;
		wait(data[i]);
		PORTA.OUT = 0;
		wait(!data[i]);
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	ff 90       	pop	r15
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	08 95       	ret

00000350 <send_data>:

void send_data(unsigned char *data) {
 350:	af 92       	push	r10
 352:	bf 92       	push	r11
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ec 01       	movw	r28, r24
	unsigned int i, j;
	for (i = 0; i < DEVIDE; i++) {
 366:	c1 2c       	mov	r12, r1
 368:	d1 2c       	mov	r13, r1
		for (j = 0; j < CONTROL_LED; j++) {
			HLGenerator(1<<i, &data[j+CONTROL_LED*i]);
 36a:	aa 24       	eor	r10, r10
 36c:	a3 94       	inc	r10
 36e:	b1 2c       	mov	r11, r1
 370:	10 c0       	rjmp	.+32     	; 0x392 <send_data+0x42>
 372:	be 01       	movw	r22, r28
 374:	c7 01       	movw	r24, r14
 376:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <HLGenerator>
 37a:	21 96       	adiw	r28, 0x01	; 1
}

void send_data(unsigned char *data) {
	unsigned int i, j;
	for (i = 0; i < DEVIDE; i++) {
		for (j = 0; j < CONTROL_LED; j++) {
 37c:	0c 17       	cp	r16, r28
 37e:	1d 07       	cpc	r17, r29
 380:	c1 f7       	brne	.-16     	; 0x372 <send_data+0x22>
	}
}

void send_data(unsigned char *data) {
	unsigned int i, j;
	for (i = 0; i < DEVIDE; i++) {
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	c8 1a       	sub	r12, r24
 386:	d8 0a       	sbc	r13, r24
 388:	e8 01       	movw	r28, r16
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	c8 16       	cp	r12, r24
 38e:	d1 04       	cpc	r13, r1
 390:	59 f0       	breq	.+22     	; 0x3a8 <send_data+0x58>
		for (j = 0; j < CONTROL_LED; j++) {
			HLGenerator(1<<i, &data[j+CONTROL_LED*i]);
 392:	75 01       	movw	r14, r10
 394:	0c 2c       	mov	r0, r12
 396:	02 c0       	rjmp	.+4      	; 0x39c <send_data+0x4c>
 398:	ee 0c       	add	r14, r14
 39a:	ff 1c       	adc	r15, r15
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <send_data+0x48>
 3a0:	8e 01       	movw	r16, r28
 3a2:	0c 5f       	subi	r16, 0xFC	; 252
 3a4:	1f 4f       	sbci	r17, 0xFF	; 255
 3a6:	e5 cf       	rjmp	.-54     	; 0x372 <send_data+0x22>
		}
	} 
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	bf 90       	pop	r11
 3ba:	af 90       	pop	r10
 3bc:	08 95       	ret

000003be <main>:

int main(void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	6c 97       	sbiw	r28, 0x1c	; 28
 3c8:	cd bf       	out	0x3d, r28	; 61
 3ca:	de bf       	out	0x3e, r29	; 62
	clock_internal_init();
 3cc:	0e 94 c2 00 	call	0x184	; 0x184 <clock_internal_init>

	PORTA.DIR = 0xFF;
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	80 93 00 06 	sts	0x0600, r24
	PORTB.DIR = 0x00;
 3d6:	10 92 20 06 	sts	0x0620, r1
	PORTC.DIR = 0x00;
 3da:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0x00;
 3de:	10 92 60 06 	sts	0x0660, r1
	PORTE.DIR = 0x00;
 3e2:	10 92 80 06 	sts	0x0680, r1
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
	unsigned char row = 0;
	unsigned char color_data = 0;
	unsigned char fill_color_data[6] = {};
 3e6:	fe 01       	movw	r30, r28
 3e8:	31 96       	adiw	r30, 0x01	; 1
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	df 01       	movw	r26, r30
 3ee:	1d 92       	st	X+, r1
 3f0:	8a 95       	dec	r24
 3f2:	e9 f7       	brne	.-6      	; 0x3ee <main+0x30>
	
	unsigned char _column = 0;
	unsigned char _row = 0;

	unsigned char data[COLUMN*ROW] = {};
 3f4:	36 96       	adiw	r30, 0x06	; 6
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	df 01       	movw	r26, r30
 3fa:	1d 92       	st	X+, r1
 3fc:	8a 95       	dec	r24
 3fe:	e9 f7       	brne	.-6      	; 0x3fa <main+0x3c>

	unsigned int count = 0, i;
 400:	e1 2c       	mov	r14, r1
 402:	f1 2c       	mov	r15, r1
	unsigned char row = 0;
	unsigned char color_data = 0;
	unsigned char fill_color_data[6] = {};
	
	unsigned char _column = 0;
	unsigned char _row = 0;
 404:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned char check = 0;
	unsigned char toggle = 0;
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
	unsigned char row = 0;
 406:	1c 8e       	std	Y+28, r1	; 0x1c
	
	unsigned char check = 0;
	unsigned char toggle = 0;
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
 408:	1b 8e       	std	Y+27, r1	; 0x1b
	PORTC.DIR = 0x00;
	PORTD.DIR = 0x00;
	PORTE.DIR = 0x00;
	
	unsigned char check = 0;
	unsigned char toggle = 0;
 40a:	51 2c       	mov	r5, r1
			
			data[ROW*(column-1)+(row-1)] = color_data;
			
		} else if (check == 0b10) {
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
 40c:	0f 2e       	mov	r0, r31
 40e:	f0 e4       	ldi	r31, 0x40	; 64
 410:	cf 2e       	mov	r12, r31
 412:	f6 e0       	ldi	r31, 0x06	; 6
 414:	df 2e       	mov	r13, r31
 416:	f0 2d       	mov	r31, r0
				}
				toggle = ~toggle;
				unsigned char address[] = {
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
 418:	0f 2e       	mov	r0, r31
 41a:	f0 e6       	ldi	r31, 0x60	; 96
 41c:	af 2e       	mov	r10, r31
 41e:	f6 e0       	ldi	r31, 0x06	; 6
 420:	bf 2e       	mov	r11, r31
 422:	f0 2d       	mov	r31, r0
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
 424:	0f 2e       	mov	r0, r31
 426:	f0 e2       	ldi	r31, 0x20	; 32
 428:	8f 2e       	mov	r8, r31
 42a:	f6 e0       	ldi	r31, 0x06	; 6
 42c:	9f 2e       	mov	r9, r31
 42e:	f0 2d       	mov	r31, r0
 430:	36 97       	sbiw	r30, 0x06	; 6
 432:	3f 01       	movw	r6, r30
 434:	8e 01       	movw	r16, r28
 436:	07 5e       	subi	r16, 0xE7	; 231
 438:	1f 4f       	sbci	r17, 0xFF	; 255
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 43a:	3e 2e       	mov	r3, r30
 43c:	47 2c       	mov	r4, r7
 43e:	26 2c       	mov	r2, r6
 440:	79 8e       	std	Y+25, r7	; 0x19
 442:	03 c0       	rjmp	.+6      	; 0x44a <main+0x8c>

	unsigned int count = 0, i;
	while (1) {
		check = PORTE.IN;
		if (check == 0b01) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
 444:	fc 8d       	ldd	r31, Y+28	; 0x1c
 446:	fa 8f       	std	Y+26, r31	; 0x1a
 448:	8b 8f       	std	Y+27, r24	; 0x1b

	unsigned char data[COLUMN*ROW] = {};

	unsigned int count = 0, i;
	while (1) {
		check = PORTE.IN;
 44a:	80 91 88 06 	lds	r24, 0x0688
		if (check == 0b01) {
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	11 f5       	brne	.+68     	; 0x496 <main+0xd8>
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
 452:	d6 01       	movw	r26, r12
 454:	18 96       	adiw	r26, 0x08	; 8
 456:	8c 91       	ld	r24, X
 458:	8f 71       	andi	r24, 0x1F	; 31
 45a:	bb 8d       	ldd	r27, Y+27	; 0x1b
 45c:	8b 13       	cpse	r24, r27
 45e:	07 c0       	rjmp	.+14     	; 0x46e <main+0xb0>
 460:	f5 01       	movw	r30, r10
 462:	90 85       	ldd	r25, Z+8	; 0x08
 464:	9f 71       	andi	r25, 0x1F	; 31
 466:	9a 8f       	std	Y+26, r25	; 0x1a
 468:	fc 8d       	ldd	r31, Y+28	; 0x1c
 46a:	9f 17       	cp	r25, r31
 46c:	59 f3       	breq	.-42     	; 0x444 <main+0x86>
				continue;
			}
			column = _column;
			row = _row;
			color_data = PORTB.IN & 0b00000111;
 46e:	d4 01       	movw	r26, r8
 470:	18 96       	adiw	r26, 0x08	; 8
 472:	9c 91       	ld	r25, X
			
			data[ROW*(column-1)+(row-1)] = color_data;
 474:	e8 2f       	mov	r30, r24
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	e6 0d       	add	r30, r6
 484:	f7 1d       	adc	r31, r7
 486:	ba 8d       	ldd	r27, Y+26	; 0x1a
 488:	eb 0f       	add	r30, r27
 48a:	f1 1d       	adc	r31, r1
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
			row = _row;
			color_data = PORTB.IN & 0b00000111;
 48c:	97 70       	andi	r25, 0x07	; 7
			
			data[ROW*(column-1)+(row-1)] = color_data;
 48e:	95 83       	std	Z+5, r25	; 0x05
		if (check == 0b01) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
			row = _row;
 490:	bc 8f       	std	Y+28, r27	; 0x1c
		check = PORTE.IN;
		if (check == 0b01) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
 492:	8b 8f       	std	Y+27, r24	; 0x1b
 494:	da cf       	rjmp	.-76     	; 0x44a <main+0x8c>
			row = _row;
			color_data = PORTB.IN & 0b00000111;
			
			data[ROW*(column-1)+(row-1)] = color_data;
			
		} else if (check == 0b10) {
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	09 f0       	breq	.+2      	; 0x49c <main+0xde>
 49a:	5b c0       	rjmp	.+182    	; 0x552 <main+0x194>
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
 49c:	e2 e0       	ldi	r30, 0x02	; 2
 49e:	ee 16       	cp	r14, r30
 4a0:	f1 04       	cpc	r15, r1
 4a2:	98 f6       	brcc	.-90     	; 0x44a <main+0x8c>
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
 4a4:	d6 01       	movw	r26, r12
 4a6:	18 96       	adiw	r26, 0x08	; 8
 4a8:	8c 91       	ld	r24, X
 4aa:	81 70       	andi	r24, 0x01	; 1
 4ac:	85 11       	cpse	r24, r5
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <main+0xf6>
					continue;
 4b0:	58 2e       	mov	r5, r24
 4b2:	49 c0       	rjmp	.+146    	; 0x546 <main+0x188>
				}
				toggle = ~toggle;
 4b4:	50 94       	com	r5
				unsigned char address[] = {
					PORTC.IN & 0b00111000 >> 3,
 4b6:	f6 01       	movw	r30, r12
 4b8:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4ba:	87 70       	andi	r24, 0x07	; 7
 4bc:	8b 8b       	std	Y+19, r24	; 0x13
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
 4be:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4c0:	87 70       	andi	r24, 0x07	; 7
 4c2:	8c 8b       	std	Y+20, r24	; 0x14
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
 4c4:	d5 01       	movw	r26, r10
 4c6:	18 96       	adiw	r26, 0x08	; 8
 4c8:	8c 91       	ld	r24, X
 4ca:	18 97       	sbiw	r26, 0x08	; 8
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4cc:	87 70       	andi	r24, 0x07	; 7
 4ce:	8d 8b       	std	Y+21, r24	; 0x15
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
 4d0:	18 96       	adiw	r26, 0x08	; 8
 4d2:	8c 91       	ld	r24, X
 4d4:	18 97       	sbiw	r26, 0x08	; 8
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4d6:	87 70       	andi	r24, 0x07	; 7
 4d8:	8e 8b       	std	Y+22, r24	; 0x16
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
 4da:	18 96       	adiw	r26, 0x08	; 8
 4dc:	8c 91       	ld	r24, X
 4de:	f4 01       	movw	r30, r8
 4e0:	90 85       	ldd	r25, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4e2:	91 70       	andi	r25, 0x01	; 1
 4e4:	86 70       	andi	r24, 0x06	; 6
 4e6:	89 2b       	or	r24, r25
 4e8:	8f 8b       	std	Y+23, r24	; 0x17
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
 4ea:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4ec:	87 70       	andi	r24, 0x07	; 7
 4ee:	88 8f       	std	Y+24, r24	; 0x18
 4f0:	fe 01       	movw	r30, r28
 4f2:	73 96       	adiw	r30, 0x13	; 19
 4f4:	43 2d       	mov	r20, r3
 4f6:	54 2d       	mov	r21, r4
 4f8:	82 2d       	mov	r24, r2
 4fa:	99 8d       	ldd	r25, Y+25	; 0x19
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
					fill_color_data[i] = address[i];
 4fc:	21 91       	ld	r18, Z+
 4fe:	dc 01       	movw	r26, r24
 500:	2d 93       	st	X+, r18
 502:	cd 01       	movw	r24, r26
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
 504:	e0 17       	cp	r30, r16
 506:	f1 07       	cpc	r31, r17
 508:	c9 f7       	brne	.-14     	; 0x4fc <main+0x13e>
					fill_color_data[i] = address[i];
				}
				for (i = 0; i < 6; i++) {
					data[i+count*6] = fill_color_data[i];
 50a:	c7 01       	movw	r24, r14
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	8e 0d       	add	r24, r14
 512:	9f 1d       	adc	r25, r15
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	e7 e0       	ldi	r30, 0x07	; 7
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ec 0f       	add	r30, r28
 51e:	fd 1f       	adc	r31, r29
 520:	e8 0f       	add	r30, r24
 522:	f9 1f       	adc	r31, r25
 524:	06 96       	adiw	r24, 0x06	; 6
 526:	27 e0       	ldi	r18, 0x07	; 7
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	2c 0f       	add	r18, r28
 52c:	3d 1f       	adc	r19, r29
 52e:	82 0f       	add	r24, r18
 530:	93 1f       	adc	r25, r19
 532:	da 01       	movw	r26, r20
 534:	2d 91       	ld	r18, X+
 536:	ad 01       	movw	r20, r26
 538:	21 93       	st	Z+, r18
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
					fill_color_data[i] = address[i];
				}
				for (i = 0; i < 6; i++) {
 53a:	e8 17       	cp	r30, r24
 53c:	f9 07       	cpc	r31, r25
 53e:	c9 f7       	brne	.-14     	; 0x532 <main+0x174>
					data[i+count*6] = fill_color_data[i];
				}
				count++;
 540:	bf ef       	ldi	r27, 0xFF	; 255
 542:	eb 1a       	sub	r14, r27
 544:	fb 0a       	sbc	r15, r27
			color_data = PORTB.IN & 0b00000111;
			
			data[ROW*(column-1)+(row-1)] = color_data;
			
		} else if (check == 0b10) {
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
 546:	e2 e0       	ldi	r30, 0x02	; 2
 548:	ee 16       	cp	r14, r30
 54a:	f1 04       	cpc	r15, r1
 54c:	08 f4       	brcc	.+2      	; 0x550 <main+0x192>
 54e:	aa cf       	rjmp	.-172    	; 0x4a4 <main+0xe6>
 550:	7c cf       	rjmp	.-264    	; 0x44a <main+0x8c>
				for (i = 0; i < 6; i++) {
					data[i+count*6] = fill_color_data[i];
				}
				count++;
			}
		} else if (check == 0b11) {
 552:	83 30       	cpi	r24, 0x03	; 3
 554:	09 f0       	breq	.+2      	; 0x558 <main+0x19a>
 556:	79 cf       	rjmp	.-270    	; 0x44a <main+0x8c>
			send_data(data);
 558:	ce 01       	movw	r24, r28
 55a:	07 96       	adiw	r24, 0x07	; 7
 55c:	0e 94 a8 01 	call	0x350	; 0x350 <send_data>
 560:	74 cf       	rjmp	.-280    	; 0x44a <main+0x8c>

00000562 <_exit>:
 562:	f8 94       	cli

00000564 <__stop_program>:
 564:	ff cf       	rjmp	.-2      	; 0x564 <__stop_program>
