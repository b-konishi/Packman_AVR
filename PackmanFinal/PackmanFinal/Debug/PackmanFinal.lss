
PackmanFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000064f  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000022e  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d0  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046a  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  58:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  5c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  68:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  6c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  70:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  74:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  7c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  80:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  84:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  88:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  8c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  90:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  94:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  98:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  9c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  a8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  ac:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  b8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  bc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  c8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  cc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  d8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  dc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  e8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  ec:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f0:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  f8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  fc:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 100:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 104:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 108:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 10c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 110:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 114:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 118:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 11c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 120:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 124:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 128:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 12c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 130:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 134:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 138:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 13c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 140:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 144:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 148:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 14c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 150:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 154:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 158:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 15c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 160:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 164:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
 168:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62
 178:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
 17c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_exit>

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000184 <clock_internal_init>:

#include <avr/io.h>
#include <util/delay.h>

void clock_internal_init() {
	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
 184:	88 ed       	ldi	r24, 0xD8	; 216
 186:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
 18e:	e0 e5       	ldi	r30, 0x50	; 80
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	81 81       	ldd	r24, Z+1	; 0x01
 194:	81 ff       	sbrs	r24, 1
 196:	fd cf       	rjmp	.-6      	; 0x192 <clock_internal_init+0xe>
	CCP = CCP_IOREG_gc;              // disable register security for clock update
 198:	88 ed       	ldi	r24, 0xD8	; 216
 19a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 40 00 	sts	0x0040, r24
 1a2:	08 95       	ret

000001a4 <wait>:
}

void wait(unsigned int time){
	if (time) {
 1a4:	89 2b       	or	r24, r25
 1a6:	09 f4       	brne	.+2      	; 0x1aa <wait+0x6>
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <wait+0x4c>
	...
		__asm__ __volatile__("\n"
 1ee:	08 95       	ret
			"nop\n\t"
			"nop\n\t"
			"nop\n\t"
		);
	} else if (!time) {
		__asm__ __volatile__("\n"
 1f0:	00 00       	nop
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <HLGenerator>:

/*
 * port:	PORT bit
 * *data	
 */
void HLGenerator(unsigned int port, unsigned char *data) {
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	f8 2e       	mov	r15, r24
 208:	6b 01       	movw	r12, r22
	unsigned char i;
	for (i = 0; i < 3; i++) {
 20a:	e1 2c       	mov	r14, r1
		// 1
		PORTA.OUT = port;
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d6 e0       	ldi	r29, 0x06	; 6
 210:	fc 82       	std	Y+4, r15	; 0x04
 212:	86 01       	movw	r16, r12
		wait(data[i]);
 214:	f6 01       	movw	r30, r12
 216:	80 81       	ld	r24, Z
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 21e:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	f6 01       	movw	r30, r12
 226:	20 81       	ld	r18, Z
 228:	22 23       	and	r18, r18
 22a:	11 f0       	breq	.+4      	; 0x230 <HLGenerator+0x3a>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 2
		PORTA.OUT = port;
 234:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 236:	f8 01       	movw	r30, r16
 238:	80 81       	ld	r24, Z
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 240:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	f8 01       	movw	r30, r16
 248:	20 81       	ld	r18, Z
 24a:	22 23       	and	r18, r18
 24c:	11 f0       	breq	.+4      	; 0x252 <HLGenerator+0x5c>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 3
		PORTA.OUT = port;
 256:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 258:	f8 01       	movw	r30, r16
 25a:	80 81       	ld	r24, Z
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 262:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	f8 01       	movw	r30, r16
 26a:	20 81       	ld	r18, Z
 26c:	22 23       	and	r18, r18
 26e:	11 f0       	breq	.+4      	; 0x274 <HLGenerator+0x7e>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 4
		PORTA.OUT = port;
 278:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 27a:	f8 01       	movw	r30, r16
 27c:	80 81       	ld	r24, Z
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 284:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	f8 01       	movw	r30, r16
 28c:	20 81       	ld	r18, Z
 28e:	22 23       	and	r18, r18
 290:	11 f0       	breq	.+4      	; 0x296 <HLGenerator+0xa0>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 5
		PORTA.OUT = port;
 29a:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 29c:	f8 01       	movw	r30, r16
 29e:	80 81       	ld	r24, Z
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2a6:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	f8 01       	movw	r30, r16
 2ae:	20 81       	ld	r18, Z
 2b0:	22 23       	and	r18, r18
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <HLGenerator+0xc2>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 6
		PORTA.OUT = port;
 2bc:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 2be:	f8 01       	movw	r30, r16
 2c0:	80 81       	ld	r24, Z
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2c8:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	f8 01       	movw	r30, r16
 2d0:	20 81       	ld	r18, Z
 2d2:	22 23       	and	r18, r18
 2d4:	11 f0       	breq	.+4      	; 0x2da <HLGenerator+0xe4>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 7
		PORTA.OUT = port;
 2de:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 2e0:	f8 01       	movw	r30, r16
 2e2:	80 81       	ld	r24, Z
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 2ea:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	f8 01       	movw	r30, r16
 2f2:	20 81       	ld	r18, Z
 2f4:	22 23       	and	r18, r18
 2f6:	11 f0       	breq	.+4      	; 0x2fc <HLGenerator+0x106>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		// 8
		PORTA.OUT = port;
 300:	fc 82       	std	Y+4, r15	; 0x04
		wait(data[i]);
 302:	f8 01       	movw	r30, r16
 304:	80 81       	ld	r24, Z
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
		PORTA.OUT = 0;
 30c:	1c 82       	std	Y+4, r1	; 0x04
		wait(!data[i]);
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	f8 01       	movw	r30, r16
 314:	20 81       	ld	r18, Z
 316:	22 23       	and	r18, r18
 318:	11 f0       	breq	.+4      	; 0x31e <HLGenerator+0x128>
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <wait>
 * port:	PORT bit
 * *data	
 */
void HLGenerator(unsigned int port, unsigned char *data) {
	unsigned char i;
	for (i = 0; i < 3; i++) {
 322:	e3 94       	inc	r14
 324:	ff ef       	ldi	r31, 0xFF	; 255
 326:	cf 1a       	sub	r12, r31
 328:	df 0a       	sbc	r13, r31
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	e8 12       	cpse	r14, r24
 32e:	70 cf       	rjmp	.-288    	; 0x210 <HLGenerator+0x1a>
		PORTA.OUT = port;
		wait(data[i]);
		PORTA.OUT = 0;
		wait(!data[i]);
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	08 95       	ret

00000342 <send_data>:

/*
 * *data	data[COLUMN*ROW / DEVIDED]*DEVIDED address
 */
void send_data(unsigned char *data) {
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
 34c:	8c 01       	movw	r16, r24
 34e:	06 5f       	subi	r16, 0xF6	; 246
 350:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char i, j;
	for (i = 0; i < DEVIDE; i++) {
		for (j = 0; j < CONTROL_LED; j++) {
			HLGenerator(1<<i, &data[j+CONTROL_LED*i]);
 352:	be 01       	movw	r22, r28
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <HLGenerator>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	8f e8       	ldi	r24, 0x8F	; 143
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <send_data+0x1e>
 364:	00 c0       	rjmp	.+0      	; 0x366 <send_data+0x24>
 366:	00 00       	nop
 368:	21 96       	adiw	r28, 0x01	; 1
 * *data	data[COLUMN*ROW / DEVIDED]*DEVIDED address
 */
void send_data(unsigned char *data) {
	unsigned char i, j;
	for (i = 0; i < DEVIDE; i++) {
		for (j = 0; j < CONTROL_LED; j++) {
 36a:	c0 17       	cp	r28, r16
 36c:	d1 07       	cpc	r29, r17
 36e:	89 f7       	brne	.-30     	; 0x352 <send_data+0x10>
			HLGenerator(1<<i, &data[j+CONTROL_LED*i]);
			_delay_us(50);
		}
	}
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	08 95       	ret

0000037a <main>:

int main(void)
{
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	6a 97       	sbiw	r28, 0x1a	; 26
 384:	cd bf       	out	0x3d, r28	; 61
 386:	de bf       	out	0x3e, r29	; 62
	clock_internal_init();
 388:	0e 94 c2 00 	call	0x184	; 0x184 <clock_internal_init>
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
	unsigned char row = 0;
	unsigned char color_data = 0;
	unsigned char fill_color_data[6] = {};
 38c:	fe 01       	movw	r30, r28
 38e:	31 96       	adiw	r30, 0x01	; 1
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	df 01       	movw	r26, r30
 394:	1d 92       	st	X+, r1
 396:	8a 95       	dec	r24
 398:	e9 f7       	brne	.-6      	; 0x394 <main+0x1a>
	
	unsigned char _column = 0;
	unsigned char _row = 0;

	unsigned char data[COLUMN*ROW] = {};
 39a:	36 96       	adiw	r30, 0x06	; 6
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	df 01       	movw	r26, r30
 3a0:	1d 92       	st	X+, r1
 3a2:	8a 95       	dec	r24
 3a4:	e9 f7       	brne	.-6      	; 0x3a0 <main+0x26>

	unsigned int count = 0, i;
	
	PORTA.DIR = 0xff;
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	80 93 00 06 	sts	0x0600, r24
	PORTB.DIR = 0x00;
 3ac:	10 92 20 06 	sts	0x0620, r1
	PORTC.DIR = 0x00;
 3b0:	10 92 40 06 	sts	0x0640, r1
	PORTD.DIR = 0x00;
 3b4:	10 92 60 06 	sts	0x0660, r1
	PORTE.DIR = 0x00;
 3b8:	10 92 80 06 	sts	0x0680, r1
	unsigned char _column = 0;
	unsigned char _row = 0;

	unsigned char data[COLUMN*ROW] = {};

	unsigned int count = 0, i;
 3bc:	61 2c       	mov	r6, r1
 3be:	71 2c       	mov	r7, r1
	unsigned char row = 0;
	unsigned char color_data = 0;
	unsigned char fill_color_data[6] = {};
	
	unsigned char _column = 0;
	unsigned char _row = 0;
 3c0:	18 8e       	std	Y+24, r1	; 0x18
	unsigned char check = 0;
	unsigned char toggle = 0;
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
	unsigned char row = 0;
 3c2:	1a 8e       	std	Y+26, r1	; 0x1a
	
	unsigned char check = 0;
	unsigned char toggle = 0;
	unsigned char _toggle = 0;
	
	unsigned char column = 0;
 3c4:	19 8e       	std	Y+25, r1	; 0x19
	 * ARRAY	18 19 20 21 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 00 01
	 */
	
	
	unsigned char check = 0;
	unsigned char toggle = 0;
 3c6:	31 2c       	mov	r3, r1
			
			data[ROW*(column-1)+(row-1)] = color_data;
			
		} else if (0b10 == check) {
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f0 e4       	ldi	r31, 0x40	; 64
 3cc:	cf 2e       	mov	r12, r31
 3ce:	f6 e0       	ldi	r31, 0x06	; 6
 3d0:	df 2e       	mov	r13, r31
 3d2:	f0 2d       	mov	r31, r0
				}
				toggle = ~toggle;
				unsigned char address[] = {
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f0 e6       	ldi	r31, 0x60	; 96
 3d8:	af 2e       	mov	r10, r31
 3da:	f6 e0       	ldi	r31, 0x06	; 6
 3dc:	bf 2e       	mov	r11, r31
 3de:	f0 2d       	mov	r31, r0
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
 3e0:	0f 2e       	mov	r0, r31
 3e2:	f0 e2       	ldi	r31, 0x20	; 32
 3e4:	8f 2e       	mov	r8, r31
 3e6:	f6 e0       	ldi	r31, 0x06	; 6
 3e8:	9f 2e       	mov	r9, r31
 3ea:	f0 2d       	mov	r31, r0
 3ec:	36 97       	sbiw	r30, 0x06	; 6
 3ee:	2f 01       	movw	r4, r30
 3f0:	7e 01       	movw	r14, r28
 3f2:	f7 e1       	ldi	r31, 0x17	; 23
 3f4:	ef 0e       	add	r14, r31
 3f6:	f1 1c       	adc	r15, r1
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 3f8:	24 2c       	mov	r2, r4
 3fa:	5f 8a       	std	Y+23, r5	; 0x17
 3fc:	8e 01       	movw	r16, r28
 3fe:	03 5f       	subi	r16, 0xF3	; 243
 400:	1f 4f       	sbci	r17, 0xFF	; 255
 402:	03 c0       	rjmp	.+6      	; 0x40a <main+0x90>
	*/
	
	while (1) {
		check = PORTE.IN;
		if (0b01 == check) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
 404:	8a 8d       	ldd	r24, Y+26	; 0x1a
 406:	88 8f       	std	Y+24, r24	; 0x18
 408:	29 8f       	std	Y+25, r18	; 0x19
		_delay_ms(1000);
	}
	*/
	
	while (1) {
		check = PORTE.IN;
 40a:	80 91 88 06 	lds	r24, 0x0688
		if (0b01 == check) {
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	49 f5       	brne	.+82     	; 0x464 <main+0xea>
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
 412:	d6 01       	movw	r26, r12
 414:	18 96       	adiw	r26, 0x08	; 8
 416:	2c 91       	ld	r18, X
 418:	2f 71       	andi	r18, 0x1F	; 31
 41a:	b9 8d       	ldd	r27, Y+25	; 0x19
 41c:	2b 13       	cpse	r18, r27
 41e:	07 c0       	rjmp	.+14     	; 0x42e <main+0xb4>
 420:	f5 01       	movw	r30, r10
 422:	80 85       	ldd	r24, Z+8	; 0x08
 424:	8f 71       	andi	r24, 0x1F	; 31
 426:	88 8f       	std	Y+24, r24	; 0x18
 428:	fa 8d       	ldd	r31, Y+26	; 0x1a
 42a:	8f 17       	cp	r24, r31
 42c:	59 f3       	breq	.-42     	; 0x404 <main+0x8a>
				continue;
			}
			column = _column;
			row = _row;
			color_data = PORTB.IN & 0b00000111;
 42e:	d4 01       	movw	r26, r8
 430:	18 96       	adiw	r26, 0x08	; 8
 432:	3c 91       	ld	r19, X
			
			data[ROW*(column-1)+(row-1)] = color_data;
 434:	82 2f       	mov	r24, r18
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	fc 01       	movw	r30, r24
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	e8 0f       	add	r30, r24
 44e:	f9 1f       	adc	r31, r25
 450:	e4 0d       	add	r30, r4
 452:	f5 1d       	adc	r31, r5
 454:	b8 8d       	ldd	r27, Y+24	; 0x18
 456:	eb 0f       	add	r30, r27
 458:	f1 1d       	adc	r31, r1
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
			row = _row;
			color_data = PORTB.IN & 0b00000111;
 45a:	37 70       	andi	r19, 0x07	; 7
			
			data[ROW*(column-1)+(row-1)] = color_data;
 45c:	35 83       	std	Z+5, r19	; 0x05
		if (0b01 == check) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
			row = _row;
 45e:	ba 8f       	std	Y+26, r27	; 0x1a
		check = PORTE.IN;
		if (0b01 == check) {
			if (column == (_column = (PORTC.IN & 0b00011111)) && row == (_row = (PORTD.IN & 0b00011111))) {
				continue;
			}
			column = _column;
 460:	29 8f       	std	Y+25, r18	; 0x19
 462:	d3 cf       	rjmp	.-90     	; 0x40a <main+0x90>
			row = _row;
			color_data = PORTB.IN & 0b00000111;
			
			data[ROW*(column-1)+(row-1)] = color_data;
			
		} else if (0b10 == check) {
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	e1 f5       	brne	.+120    	; 0x4e0 <main+0x166>
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
 468:	61 14       	cp	r6, r1
 46a:	71 04       	cpc	r7, r1
 46c:	71 f6       	brne	.-100    	; 0x40a <main+0x90>
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
 46e:	f6 01       	movw	r30, r12
 470:	80 85       	ldd	r24, Z+8	; 0x08
 472:	81 70       	andi	r24, 0x01	; 1
 474:	83 11       	cpse	r24, r3
 476:	02 c0       	rjmp	.+4      	; 0x47c <main+0x102>
					continue;
 478:	38 2e       	mov	r3, r24
 47a:	f9 cf       	rjmp	.-14     	; 0x46e <main+0xf4>
				}
				toggle = ~toggle;
 47c:	30 94       	com	r3
				unsigned char address[] = {
					PORTC.IN & 0b00111000 >> 3,
 47e:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 480:	87 70       	andi	r24, 0x07	; 7
 482:	89 8b       	std	Y+17, r24	; 0x11
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
 484:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 486:	87 70       	andi	r24, 0x07	; 7
 488:	8a 8b       	std	Y+18, r24	; 0x12
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
 48a:	f5 01       	movw	r30, r10
 48c:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 48e:	87 70       	andi	r24, 0x07	; 7
 490:	8b 8b       	std	Y+19, r24	; 0x13
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
 492:	80 85       	ldd	r24, Z+8	; 0x08
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 494:	87 70       	andi	r24, 0x07	; 7
 496:	8c 8b       	std	Y+20, r24	; 0x14
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
 498:	80 85       	ldd	r24, Z+8	; 0x08
 49a:	d4 01       	movw	r26, r8
 49c:	18 96       	adiw	r26, 0x08	; 8
 49e:	9c 91       	ld	r25, X
 4a0:	18 97       	sbiw	r26, 0x08	; 8
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4a2:	91 70       	andi	r25, 0x01	; 1
 4a4:	86 70       	andi	r24, 0x06	; 6
 4a6:	89 2b       	or	r24, r25
 4a8:	8d 8b       	std	Y+21, r24	; 0x15
					PORTC.IN & 0b00111000 >> 3,
					PORTC.IN & 0b00000111,
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
 4aa:	18 96       	adiw	r26, 0x08	; 8
 4ac:	8c 91       	ld	r24, X
			while (count < COLUMN*ROW/FILL_DATA_SIZE) {
				if (toggle == (_toggle = (PORTC.IN & 0b10000000 >> 7))) {
					continue;
				}
				toggle = ~toggle;
				unsigned char address[] = {
 4ae:	87 70       	andi	r24, 0x07	; 7
 4b0:	8e 8b       	std	Y+22, r24	; 0x16
 4b2:	fe 01       	movw	r30, r28
 4b4:	71 96       	adiw	r30, 0x11	; 17
 4b6:	c2 01       	movw	r24, r4
 4b8:	a2 2d       	mov	r26, r2
 4ba:	bf 89       	ldd	r27, Y+23	; 0x17
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
					fill_color_data[i] = address[i];
 4bc:	21 91       	ld	r18, Z+
 4be:	2d 93       	st	X+, r18
					PORTD.IN & 0b11100000 >> 5,
					PORTD.IN & 0b00011100 >> 2,
					(PORTD.IN & 0b00000011 << 1)|(PORTB.IN & 0b1000 >> 3),
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
 4c0:	ee 15       	cp	r30, r14
 4c2:	ff 05       	cpc	r31, r15
 4c4:	d9 f7       	brne	.-10     	; 0x4bc <main+0x142>
 4c6:	fe 01       	movw	r30, r28
 4c8:	37 96       	adiw	r30, 0x07	; 7
					fill_color_data[i] = address[i];
				}
				for (i = 0; i < 6; i++) {
					data[i+count*6] = fill_color_data[i];
 4ca:	dc 01       	movw	r26, r24
 4cc:	2d 91       	ld	r18, X+
 4ce:	cd 01       	movw	r24, r26
 4d0:	21 93       	st	Z+, r18
					PORTB.IN & 0b0111
				};
				for (i = 0; i < FILL_DATA_SIZE; i++) {
					fill_color_data[i] = address[i];
				}
				for (i = 0; i < 6; i++) {
 4d2:	e0 17       	cp	r30, r16
 4d4:	f1 07       	cpc	r31, r17
 4d6:	c9 f7       	brne	.-14     	; 0x4ca <main+0x150>
					data[i+count*6] = fill_color_data[i];
				}
				count++;
 4d8:	66 24       	eor	r6, r6
 4da:	63 94       	inc	r6
 4dc:	71 2c       	mov	r7, r1
 4de:	95 cf       	rjmp	.-214    	; 0x40a <main+0x90>
			}
		} else if (check == 0b11) {
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <main+0x16c>
 4e4:	92 cf       	rjmp	.-220    	; 0x40a <main+0x90>
			send_data(data);
 4e6:	ce 01       	movw	r24, r28
 4e8:	07 96       	adiw	r24, 0x07	; 7
 4ea:	0e 94 a1 01 	call	0x342	; 0x342 <send_data>
 4ee:	8d cf       	rjmp	.-230    	; 0x40a <main+0x90>

000004f0 <_exit>:
 4f0:	f8 94       	cli

000004f2 <__stop_program>:
 4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <__stop_program>
