
Packman2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00802000  00000534  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1a  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021a  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000155  00000000  00000000  00001b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
   4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
   8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
   c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  10:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  14:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  18:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  1c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  24:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  28:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  2c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  30:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  38:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  3c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  44:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  48:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  4c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  50:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  54:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  58:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  5c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  60:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  68:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  6c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  70:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  74:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  78:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  7c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  80:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  84:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  8c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  90:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  94:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  98:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  9c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  a0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  a4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  a8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  ac:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  b0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  b4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  b8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  bc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  c0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  c4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  c8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  cc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  d0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  d4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  d8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  dc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  e0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  e4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  e8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  ec:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  f0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  f4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  f8:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
  fc:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 100:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 104:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 108:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 10c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 110:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 114:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 118:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 11c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 120:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 124:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 128:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 12c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 130:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 134:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 138:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 13c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 140:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 144:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 148:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 14c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 150:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 154:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 158:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 15c:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 160:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 164:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>
 168:	0c 94 cb 00 	jmp	0x196	; 0x196 <__bad_interrupt>

0000016c <__ctors_end>:
 16c:	11 24       	eor	r1, r1
 16e:	1f be       	out	0x3f, r1	; 63
 170:	cf ef       	ldi	r28, 0xFF	; 255
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df e2       	ldi	r29, 0x2F	; 47
 176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
 178:	10 e2       	ldi	r17, 0x20	; 32
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e2       	ldi	r27, 0x20	; 32
 17e:	e4 e3       	ldi	r30, 0x34	; 52
 180:	f5 e0       	ldi	r31, 0x05	; 5
 182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
 184:	05 90       	lpm	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	a0 39       	cpi	r26, 0x90	; 144
 18a:	b1 07       	cpc	r27, r17
 18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>
 18e:	0e 94 27 01 	call	0x24e	; 0x24e <main>
 192:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

00000196 <__bad_interrupt>:
 196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019a <clock_internal_init>:

#include <avr/io.h>
#include <util/delay.h>

void clock_internal_init() {
	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
 19a:	88 ed       	ldi	r24, 0xD8	; 216
 19c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
 1a4:	e0 e5       	ldi	r30, 0x50	; 80
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	81 81       	ldd	r24, Z+1	; 0x01
 1aa:	81 ff       	sbrs	r24, 1
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <clock_internal_init+0xe>
	CCP = CCP_IOREG_gc;              // disable register security for clock update
 1ae:	88 ed       	ldi	r24, 0xD8	; 216
 1b0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 40 00 	sts	0x0040, r24
 1b8:	08 95       	ret

000001ba <wait>:
}

void wait(int time){
	if (time) {
 1ba:	89 2b       	or	r24, r25
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <wait+0x6>
 1be:	23 c0       	rjmp	.+70     	; 0x206 <wait+0x4c>
	...
		__asm__ __volatile__("\n"
 204:	08 95       	ret
			"nop\n\t"
			"nop\n\t"
			"nop\n\t"
		);
	} else if (!time) {
		__asm__ __volatile__("\n"
 206:	00 00       	nop
 208:	00 00       	nop
 20a:	08 95       	ret

0000020c <HLGenerator>:
		);
	}
	return;
}

void HLGenerator(int port, int* data) {
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	f8 2e       	mov	r15, r24
	int i;
	for (i = 23; i >= 0; i--) {
 218:	c7 e1       	ldi	r28, 0x17	; 23
 21a:	d0 e0       	ldi	r29, 0x00	; 0
		PORTA.OUT = port;
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	16 e0       	ldi	r17, 0x06	; 6
 220:	f8 01       	movw	r30, r16
 222:	f4 82       	std	Z+4, r15	; 0x04
		wait(i);
 224:	ce 01       	movw	r24, r28
 226:	0e 94 dd 00 	call	0x1ba	; 0x1ba <wait>
		PORTA.OUT = 0;
 22a:	f8 01       	movw	r30, r16
 22c:	14 82       	std	Z+4, r1	; 0x04
		wait(!i);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	20 97       	sbiw	r28, 0x00	; 0
 234:	11 f0       	breq	.+4      	; 0x23a <HLGenerator+0x2e>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <wait>
	return;
}

void HLGenerator(int port, int* data) {
	int i;
	for (i = 23; i >= 0; i--) {
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	78 f7       	brcc	.-34     	; 0x220 <HLGenerator+0x14>
		PORTA.OUT = port;
		wait(i);
		PORTA.OUT = 0;
		wait(!i);
	}
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	08 95       	ret

0000024e <main>:

int main(void)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	c0 59       	subi	r28, 0x90	; 144
 258:	d1 09       	sbc	r29, r1
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	de bf       	out	0x3e, r29	; 62
	clock_internal_init();
 25e:	0e 94 cd 00 	call	0x19a	; 0x19a <clock_internal_init>
	TWIC.SLAVE.CTRLB = 0x03;
	}
	*/
	//asm volatile("LDI R17, value" ::);
	
	PORTC.DIR = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	80 93 40 06 	sts	0x0640, r24
	int red[24]	=	{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	e0 e0       	ldi	r30, 0x00	; 0
 26c:	f0 e2       	ldi	r31, 0x20	; 32
 26e:	de 01       	movw	r26, r28
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x24>
	int green[24] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0};
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	e0 e3       	ldi	r30, 0x30	; 48
 27e:	f0 e2       	ldi	r31, 0x20	; 32
 280:	de 01       	movw	r26, r28
 282:	d1 96       	adiw	r26, 0x31	; 49
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	8a 95       	dec	r24
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x36>
	int blue[24] =	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1};	
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	e0 e6       	ldi	r30, 0x60	; 96
 290:	f0 e2       	ldi	r31, 0x20	; 32
 292:	de 01       	movw	r26, r28
 294:	af 59       	subi	r26, 0x9F	; 159
 296:	bf 4f       	sbci	r27, 0xFF	; 255
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x4a>
 2a0:	08 ee       	ldi	r16, 0xE8	; 232
 2a2:	13 e0       	ldi	r17, 0x03	; 3
	
	int i;
	for (i = 0; i < 1000; i++) {
		HLGenerator(7, red);
 2a4:	be 01       	movw	r22, r28
 2a6:	6f 5f       	subi	r22, 0xFF	; 255
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	87 e0       	ldi	r24, 0x07	; 7
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	87 e0       	ldi	r24, 0x07	; 7
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2ce:	be 01       	movw	r22, r28
 2d0:	6f 5f       	subi	r22, 0xFF	; 255
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2dc:	be 01       	movw	r22, r28
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2ea:	be 01       	movw	r22, r28
 2ec:	6f 5f       	subi	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 2f8:	be 01       	movw	r22, r28
 2fa:	6f 5f       	subi	r22, 0xFF	; 255
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 306:	be 01       	movw	r22, r28
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	87 e0       	ldi	r24, 0x07	; 7
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 314:	be 01       	movw	r22, r28
 316:	6f 5f       	subi	r22, 0xFF	; 255
 318:	7f 4f       	sbci	r23, 0xFF	; 255
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 330:	be 01       	movw	r22, r28
 332:	6f 5f       	subi	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	87 e0       	ldi	r24, 0x07	; 7
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 34c:	be 01       	movw	r22, r28
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, red);
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	87 ea       	ldi	r24, 0xA7	; 167
 36c:	91 e6       	ldi	r25, 0x61	; 97
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x120>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x12a>
 378:	00 00       	nop
		_delay_ms(1000);
		
		HLGenerator(7, green);
 37a:	be 01       	movw	r22, r28
 37c:	6f 5c       	subi	r22, 0xCF	; 207
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	87 e0       	ldi	r24, 0x07	; 7
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 388:	be 01       	movw	r22, r28
 38a:	6f 5c       	subi	r22, 0xCF	; 207
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 396:	be 01       	movw	r22, r28
 398:	6f 5c       	subi	r22, 0xCF	; 207
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3a4:	be 01       	movw	r22, r28
 3a6:	6f 5c       	subi	r22, 0xCF	; 207
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	87 e0       	ldi	r24, 0x07	; 7
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3b2:	be 01       	movw	r22, r28
 3b4:	6f 5c       	subi	r22, 0xCF	; 207
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5c       	subi	r22, 0xCF	; 207
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3ce:	be 01       	movw	r22, r28
 3d0:	6f 5c       	subi	r22, 0xCF	; 207
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	87 e0       	ldi	r24, 0x07	; 7
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3dc:	be 01       	movw	r22, r28
 3de:	6f 5c       	subi	r22, 0xCF	; 207
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	87 e0       	ldi	r24, 0x07	; 7
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3ea:	be 01       	movw	r22, r28
 3ec:	6f 5c       	subi	r22, 0xCF	; 207
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	87 e0       	ldi	r24, 0x07	; 7
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 5c       	subi	r22, 0xCF	; 207
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	87 e0       	ldi	r24, 0x07	; 7
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 406:	be 01       	movw	r22, r28
 408:	6f 5c       	subi	r22, 0xCF	; 207
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	87 e0       	ldi	r24, 0x07	; 7
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 414:	be 01       	movw	r22, r28
 416:	6f 5c       	subi	r22, 0xCF	; 207
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	87 e0       	ldi	r24, 0x07	; 7
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 422:	be 01       	movw	r22, r28
 424:	6f 5c       	subi	r22, 0xCF	; 207
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, green);
 430:	be 01       	movw	r22, r28
 432:	6f 5c       	subi	r22, 0xCF	; 207
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	87 e0       	ldi	r24, 0x07	; 7
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	87 ea       	ldi	r24, 0xA7	; 167
 442:	91 e6       	ldi	r25, 0x61	; 97
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x1f6>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <main+0x200>
 44e:	00 00       	nop
		_delay_ms(1000);
		
		HLGenerator(7, blue);
 450:	be 01       	movw	r22, r28
 452:	6f 59       	subi	r22, 0x9F	; 159
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	87 e0       	ldi	r24, 0x07	; 7
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 45e:	be 01       	movw	r22, r28
 460:	6f 59       	subi	r22, 0x9F	; 159
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	87 e0       	ldi	r24, 0x07	; 7
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 46c:	be 01       	movw	r22, r28
 46e:	6f 59       	subi	r22, 0x9F	; 159
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 47a:	be 01       	movw	r22, r28
 47c:	6f 59       	subi	r22, 0x9F	; 159
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 488:	be 01       	movw	r22, r28
 48a:	6f 59       	subi	r22, 0x9F	; 159
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	87 e0       	ldi	r24, 0x07	; 7
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 496:	be 01       	movw	r22, r28
 498:	6f 59       	subi	r22, 0x9F	; 159
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	87 e0       	ldi	r24, 0x07	; 7
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4a4:	be 01       	movw	r22, r28
 4a6:	6f 59       	subi	r22, 0x9F	; 159
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	87 e0       	ldi	r24, 0x07	; 7
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 59       	subi	r22, 0x9F	; 159
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	87 e0       	ldi	r24, 0x07	; 7
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4c0:	be 01       	movw	r22, r28
 4c2:	6f 59       	subi	r22, 0x9F	; 159
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	87 e0       	ldi	r24, 0x07	; 7
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4ce:	be 01       	movw	r22, r28
 4d0:	6f 59       	subi	r22, 0x9F	; 159
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	87 e0       	ldi	r24, 0x07	; 7
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4dc:	be 01       	movw	r22, r28
 4de:	6f 59       	subi	r22, 0x9F	; 159
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	87 e0       	ldi	r24, 0x07	; 7
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4ea:	be 01       	movw	r22, r28
 4ec:	6f 59       	subi	r22, 0x9F	; 159
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	87 e0       	ldi	r24, 0x07	; 7
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 4f8:	be 01       	movw	r22, r28
 4fa:	6f 59       	subi	r22, 0x9F	; 159
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	87 e0       	ldi	r24, 0x07	; 7
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
		HLGenerator(7, blue);
 506:	be 01       	movw	r22, r28
 508:	6f 59       	subi	r22, 0x9F	; 159
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	87 e0       	ldi	r24, 0x07	; 7
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 06 01 	call	0x20c	; 0x20c <HLGenerator>
 514:	2f ef       	ldi	r18, 0xFF	; 255
 516:	87 ea       	ldi	r24, 0xA7	; 167
 518:	91 e6       	ldi	r25, 0x61	; 97
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	80 40       	sbci	r24, 0x00	; 0
 51e:	90 40       	sbci	r25, 0x00	; 0
 520:	e1 f7       	brne	.-8      	; 0x51a <main+0x2cc>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x2d6>
 524:	00 00       	nop
 526:	01 50       	subi	r16, 0x01	; 1
 528:	11 09       	sbc	r17, r1
	int red[24]	=	{1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	int green[24] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0};
	int blue[24] =	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1};	
	
	int i;
	for (i = 0; i < 1000; i++) {
 52a:	09 f0       	breq	.+2      	; 0x52e <main+0x2e0>
 52c:	bb ce       	rjmp	.-650    	; 0x2a4 <main+0x56>
		
	}
		
	
	/* Replace with your application code */
	while (1);
 52e:	ff cf       	rjmp	.-2      	; 0x52e <main+0x2e0>

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
